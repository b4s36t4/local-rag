---
import {
  Eye,
  FileText,
  RefreshCcw,
  Database,
  ArrowUpFromLine,
} from "lucide-react";
import Layout from "../layouts/Layout.astro";
import Modal from "../components/Model.astro";

const agents = [
  {
    title: "ChatPDF",
    description: "Chat with your PDF, ask questions summarize anything.",
    id: "chat_pdf",
    embedding_json: "chat_pdf.json",
    icon: FileText,
  },
  {
    title: "SQLMan",
    description: "A SQL helper that you can ask question by giving your schema",
    id: "sql_chat",
    embedding_json: "sql_chat.json",
    icon: Database,
    upload: true,
    uploadDescription: "Share your DB schema to get relavent answers",
    language: "sql",
    editor: true,
  },
];
---

<Layout title="Agents">
  <main class="mx-auto mt-6 md:w-[60%]">
    <h3 class="text-2xl font-semibold underline">Agents</h3>

    <div class="mt-4 flex items-center flex-wrap">
      {
        agents.map((agent) => {
          return (
            <div class="w-[250px] mr-4 border-2 rounded-lg border-blue-200 p-2 agent-entry">
              <agent.icon className="my-4" size={40} />
              <h2 class="text-lg font-bold">{agent.title}</h2>
              <h4 class="text-base text-gray-600">{agent.description}</h4>
              <div class="my-2 flex space-x-2">
                <span
                  class="view-documents"
                  title="View loaded/saved documents"
                >
                  <Eye />
                </span>
                <span class="reload-vector" title="Reload the data">
                  <RefreshCcw />
                </span>
                {agent.upload && (
                  <span
                    role="button"
                    class="upload-data"
                    title={agent.uploadDescription}
                  >
                    <ArrowUpFromLine />
                  </span>
                )}
              </div>
              <button
                data-agent-id={agent.id}
                data-agentJSON={JSON.stringify(agent)}
                class="w-full bg-black text-white mt-4 rounded-md p-1 agentEnable"
              >
                Enable
              </button>
            </div>
          );
        })
      }
    </div>
  </main>
  <Modal enabled={true}>
    <div slot="child" class="w-full overflow-hidden">
      <h3 class="py-2 border-b-2 border-gray-300 text-xl font-semibold w-full">
        SQL Schema
      </h3>

      <div
        class="hidden min-h-[200px] h-[calc(100%-100px)] w-full"
        id="monacoEditor"
      >
      </div>
      <div class="hidden" id="wysiwyg"></div>

      <div class="mt-4 flex float-right">
        <button
          id="modalSave"
          class="bg-gray-800 p-1 px-2 mx-1 rounded-md text-white">Save</button
        >
        <button
          id="modalClose"
          class="bg-red-400 p-1 px-2 mx-1 rounded-md text-white">Close</button
        >
      </div>
    </div>
  </Modal>

  <script>
    import { agentStore } from "../store/agent";
    import { getFiles } from "../utils/files";
    import * as monaco from "monaco-editor";
    import "../utils/loadMonacoWorker";

    const { selectedAgentId, updateAgent } = agentStore.getState();

    let editor: monaco.editor.IStandaloneCodeEditor | null = null;

    const closeButton = document.getElementById("modalClose");
    const saveButton = document.getElementById("modalSave");

    const buttons = document.querySelectorAll(
      ".agentEnable"
    ) as NodeListOf<HTMLButtonElement>;

    const monacoInstance = document.getElementById("monacoEditor");

    saveButton?.addEventListener("click", () => {
      const savedValue = editor?.getValue();
      if (!savedValue) {
        return;
      }
    });

    closeButton?.addEventListener("click", () => {
      window.modal.close();
      editor?.dispose();
      editor = null;
    });

    buttons.forEach((button) => {
      const agentId = button.dataset["agentId"];
      const agentJSON = JSON.parse((button.dataset["agentjson"] as any) ?? {});

      agentStore.subscribe(({ selectedAgentId }) => {
        if (selectedAgentId === agentId) {
          button.innerText = "Disable";
          return;
        }

        button.innerText = "Enable";
      });

      if (agentId === selectedAgentId) {
        button.innerText = "Disable";
      }

      const agentEntry = button.parentNode;

      const viewButton = agentEntry?.querySelector(".view-documents");
      const reloadButton = agentEntry?.querySelector(".reload-vector");
      const uploadButton = agentEntry?.querySelector(".upload-data");

      viewButton?.addEventListener("click", () => {
        console.log("view...", getFiles(agentId ?? ""), "instance");
      });

      const loadMonaco = () => {
        if (!agentJSON["upload"]) {
          return;
        }
        editor = monaco.editor.create(monacoInstance!, {
          language: "sql",
          value: "SELECT * from users;",
          theme: "vs-dark",
          automaticLayout: true,
        });
        window.modal.open();

        console.log(editor.getValue(), "value");

        monacoInstance?.classList.remove("hidden");
      };

      if (window.modal.enabled) {
        loadMonaco();
      }

      uploadButton?.addEventListener("click", () => {
        console.log(window.modal, "modal");
        loadMonaco();
        // loadMonacoWorker();
      });

      button.addEventListener("click", function () {
        if (!agentId) {
          return;
        }

        if (agentId === agentStore.getState().selectedAgentId) {
          updateAgent(null, null);
          return;
        }

        updateAgent(agentId, null);
      });
    });
  </script>
</Layout>
